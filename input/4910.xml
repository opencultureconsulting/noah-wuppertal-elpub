<oai_dc:dc xmlns:oai_dc="http://www.openarchives.org/OAI/2.0/oai_dc/" xmlns:dc="http://purl.org/dc/elements/1.1/" xsi:schemaLocation="http://www.openarchives.org/OAI/2.0/oai_dc/  http://www.openarchives.org/OAI/2.0/oai_dc.xsd"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><id>4910</id><datestamp>2018-01-22</datestamp><setSpec>DDC:6:60</setSpec>
          <dc:title xml:lang="de">Optimierung von Networks-on-Chip mit Hilfe der dynamischen Rekonfiguration</dc:title>
          <dc:creator>Logvinenko, Alexander</dc:creator>
          <dc:date>2018-01-22</dc:date>
          <dc:identifier>http://elpub.bib.uni-wuppertal.de/edocs/dokumente/fbe/informationstechnik/diss2014/logvinenko</dc:identifier>
          <dc:identifier>http://elpub.bib.uni-wuppertal.de/servlets/DocumentServlet?id=4910</dc:identifier>
          <dc:identifier>urn:nbn:de:hbz:468-20150623-102353-7</dc:identifier>
          <dc:identifier>http://elpub.bib.uni-wuppertal.de/servlets/DerivateServlet/Derivate-4794/de1406.pdf</dc:identifier>
          <dc:description xml:lang="de">&lt;p&gt;Moderne Prozessoren werden modular entwickelt. Dadurch muss bei Neuentwicklungen&#13;
nicht alles neu geplant werden, sondern es kann auf bereits vorgefertigte&#13;
Komponenten - sogenannte IP Blocks (Intellectual Property Blocks) - zurückgegriffen&#13;
werden.&lt;br&gt;&#13;
Um die einzelnen IPs miteinander verbinden zu können, wurde eine rekonfigurationsfähige Architektur &#13;
für Network-on-Chip entwickelt: Reconfigurable Multi-Interconnection Network (RecMIN). &#13;
Diese ist in der Lage, sich an die aktuelle Datenverkehrssituation des Netzes anzupassen.&lt;br&gt;&#13;
&#13;
Die entwickelte Architektur besteht aus einzelnen rekonfigurierbaren Zellen. Zusätzlich weist die Rekonfigurationsarchitektur einen höheren Wiederverwendungsgrad&#13;
für die Hardware-Strukturen auf, z.B. bzgl. Puffer, Multiplexer. Das bedeutet, dass&#13;
die Komponenten der alten Topologie auch nach der Rekonfiguration für die neue&#13;
Topologie aktiv verwendet werden.&lt;br&gt;&#13;
&#13;
Um die Simulation der Rekonfigurationsarchitektur zu ermöglichen, wurde ein&#13;
Simulationsporgramm &lt;i&gt;RecSim&lt;/i&gt; implementiert.&lt;br&gt;&#13;
&#13;
Zum Schluss werden drei Algorithmen präsentiert, die das Verhalten des RecMIN&#13;
beobachten und bei Bedarf eine Rekonfiguration durchführen. Auf diese Weise soll&#13;
die Netztopologie auch bei Belastungsänderungen optimal an den Datenverkehr&#13;
angepasst bleiben.&lt;br&gt;&#13;
&#13;
Die Ergebnisse der Simulation haben gezeigt, dass die hier vorgeschlagene rekonfigurierbare Netzwerkstruktur das Potential hat, die Leistungsfähigkeit einiger Anwendungen,&#13;
insbesondere derer, die zwischen zwei oder mehreren Verkehrsprofilen wechseln, drastisch zu verbessern. &#13;
So, z. B., würde diese Baustruktur die Paketverzögerungen bedeutend (bis zu Faktor sieben) reduzieren &#13;
(s. Kapitel 6).&lt;br&gt;&#13;
&#13;
Für die Hardwarerealisierung der RecMIN-Architektur auf FPGA ist Xilinx-&#13;
FPGA mit FIFO-Speicherprinzip (beim einfachen FIFO für die RecMINs mit dünnem&#13;
Paketverkehr) als eine der besten Lösungen zu empfehlen. Wird aber für RecMIN&#13;
ein Ringspeicher gewählt, was vor allem für einen starken Paketverkehr sinnvoll&#13;
ist, so wäre die Wahl zwischen Altera- und Xilinx-FPGAs für jeden konkreten Fall&#13;
mithilfe der Daten aus den Abbildungen 7.9 - 7.11 individuell zu treffen.&lt;br&gt;&#13;
&#13;
Der Vergleich zwischen den drei vorgeschlagenen Rekonfigurationsalgorithmen&#13;
liefert folgende Schlussfolgerungen:&lt;br&gt;&#13;
Der ŋ-Algorithmus kann in Computersimulationen verwendet werden, um die von&#13;
anderen Algorithmen (die keine erschöpfende Suche benutzen) erzielten Ergebnisse&#13;
zu vergleichen. Jedoch ist das Integrieren des ŋ-Algorithmus in ein SoC mit großem&#13;
Hardware-Aufwand verbunden.&lt;br&gt;&#13;
Der Minimal-Queues-Algorithmus (MQA) ist schneller als der ŋ-Algorithmus und&#13;
erfordert weniger Fläche auf dem Chip. Er kann mit kleinerem Hardware-Aufwand&#13;
als der ŋ-Algorithmus in SoC integriert werden. Der MQA ist dann zu empfehlen,&#13;
falls die Vorkenntnisse über die Eigenschaften des möglichen Verkehrs im Netzwerk&#13;
nicht vorhanden sind.&lt;br&gt;&#13;
Der Pattern-Identication-Algorithmus (PIA) ist in den meisten Fällen schneller&#13;
als der ŋ-Algorithmus und der Minimal-Queues-Algorithmus. Die Umsetzung des&#13;
PIAs auf SoC ist relativ einfach. Im Falle, dass die Muster für den PIA optimal&#13;
implementiert sind, ist der PIA von allen drei hier für RecMIN vorgeschlagenen&#13;
Rekonfigurationsalgorithmen die effizienteste Lösung.</dc:description>
          <dc:description xml:lang="en">&lt;p&gt;Modern processors are developed modularly. Therefore new developments need not&#13;
be re-scheduled from the scratch; rather prefabricated components - so-called IP&#13;
blocks (Intellectual Property blocks) - can be used.&lt;br&gt;&#13;
&#13;
In order to connect the individual IPs, a reconfigurable architecture for&#13;
network-on-chip has been developed: Reconfigurable Multi-Interconnection Network&#13;
(RecMIN). It is able to adapt to the current traffic situation of the network.&lt;br&gt;&#13;
&#13;
The developed architecture consists of single reconfigurable cells. In addition, the&#13;
reconfiguration architecture has a higher degree of reuse for the hardware structures,&#13;
such as regarding buffer, multiplexer. This means that the components of the previously&#13;
active topology are actively used also after the reconfiguration to the new&#13;
topology.&lt;br&gt;&#13;
&#13;
In order to enable the simulation of the reconfiguration architecture, a simulation&#13;
program RecSim was implemented.&lt;br&gt;&#13;
&#13;
Finally, three algorithms are presented that observe the behavior of the RecMIN&#13;
and perform a reconfiguration when needed. In this way the network topology is to&#13;
remain optimally adapted to the traffic even if the load changes.&lt;br&gt;&#13;
&#13;
The results of the simulation showed that the proposed reconfigurable network&#13;
structure has the potential to improve the performance of some applications, especially&#13;
those which switch between two or more traffic proles. For some applications&#13;
RecMIN-architecture would significantly reduce paket delays (up to factor seven)&#13;
(see chapter 6).&lt;br&gt;&#13;
&#13;
For the hardware realization of the RecMIN-architecture on FPGA a Xilinx-FPGA&#13;
with FIFO-buffer concept is recommended, as one of the best solutions for the&#13;
RecMin realization. However, if circular buffer is chosen for RecMIN, which mostly&#13;
makes sense for high packet traffic, the choice between Altera- and Xilinx-FPGAs&#13;
would have to be made individually, for each specific case, based on the data from&#13;
the images 7.9  - 7.11.&lt;br&gt;&#13;
&#13;
The comparison between the three suggested reconfiguration algorithms provides&#13;
the following conclusion:&lt;br&gt;&#13;
ŋ-algorithm can be used in computer simulations to compare the results achieved&#13;
from other algorithms. However, integrating the ŋ-algorithm into a SoC is attended&#13;
with hardware complexity.&lt;br&gt;&#13;
&#13;
Minimal-Queues-Algorithm (MQA) is faster than the ŋ-algorithm and requires&#13;
less area on the SoC. It can be integrated into SoC with less hardware complexity&#13;
than ŋ-algorithm. The MQA is a best solution in case that foreknowledge about the&#13;
nerwork traffic are not available.&lt;br&gt;&#13;
&#13;
The Pattern-Identication-Algorithm (PIA) is faster than the ŋ-algorithm and&#13;
the Minimal-Queue-Algorithm. In case of properly implementation of the pattern&#13;
for the PIA, the PIA is the most efficient of three algorithms proposed in this work.</dc:description>
          <dc:subject>600 Technik, Medizin, angewandte Wissenschaften » 600 Technik</dc:subject>
          <dc:subject>Fakultät für Elektrotechnik, Informationstechnik und Medientechnik » Informationstechnik » Dissertationen</dc:subject>
          <dc:type>Wissenschaftliche Abschlussarbeiten » Dissertation</dc:type>
          <dc:language>deu</dc:language>
          <dc:format>application/pdf</dc:format>
          <dc:type>Text</dc:type>
        </oai_dc:dc>